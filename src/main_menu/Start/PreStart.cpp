#include "PreStart.h"
#include "Start.h"
#include "../../ImageLoad.h"
#include "../../API/TypingSpeedAPI.h"

extern Start renderStart;
static bool showPreStart = true;  // –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é PreStart

void PreStart::renderPreStartWindow(bool& show) {
    if (!m_arrowIconTexture||!m_timerIconTexture  ||!m_languageIconTexture || !m_newRunButton  ||!m_competitorIconTexture) {
        initializeTexture();
    }

    ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
    ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
    ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(0.5f, 0.5f, 0.5f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_ButtonActive, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
    ImGui::PushStyleVar(ImGuiStyleVar_FrameBorderSize, 0.0f);
    ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(1, 1));

    ImGuiIO& io = ImGui::GetIO();
    ImGui::SetNextWindowPos(ImVec2(0, 0));
    ImGui::SetNextWindowSize(io.DisplaySize);
    ImGui::Begin("PreStart Page", nullptr, ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoMove);

    float centerX = io.DisplaySize.x * 0.5f;

    // üîπ –ö–Ω–æ–ø–∫–∞ "‚Üê" (—Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞–∑–∞–¥)
    ImGui::SetCursorPos(ImVec2(10, 10));
    ImTextureID arrowIconId = static_cast<ImTextureID>(static_cast<intptr_t>(m_arrowIconTexture->GetTextureID())); 
    if (ImGui::ImageButton("Back", arrowIconId, m_buttonSize, ImVec2(0,0), ImVec2(1,1))) {
        show = false;
    }

    static bool showLanguageOptions = false;
    ImTextureID languageIconId = static_cast<ImTextureID>(static_cast<intptr_t>(m_languageIconTexture->GetTextureID()));

    float languageButtonWidth = 500.0f;
    float languageButtonHeight = 40.0f;
    float languageButtonX = centerX - languageButtonWidth * 0.5f;
    float languageButtonY = 80.0f;

    // üîπ –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    ImGui::SetCursorPos(ImVec2(languageButtonX, languageButtonY));
    if (ImGui::ImageButton("Language", languageIconId, ImVec2(languageButtonWidth, languageButtonHeight))) {
        showLanguageOptions = !showLanguageOptions; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    }

    // üîπ –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
if (showLanguageOptions) {
    // –°—Ç–∏–ª—å —Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞
    ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.8f, 0.8f, 0.8f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_PopupBg, ImVec4(0.15f, 0.15f, 0.15f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_Border, ImVec4(0.1f, 0.1f, 0.1f, 1.0f));

    // –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ = —Ä–∞–∑–º–µ—Ä—É –∫–Ω–æ–ø–∫–∏
    float languageListWidth = languageButtonWidth;
    float languageListX = centerX - languageListWidth * 0.5f;
    float languageListY = languageButtonY + languageButtonHeight + 5.0f; // –ß—É—Ç—å –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏

    ImGui::SetCursorPos(ImVec2(languageListX, languageListY));
    static int selectedLanguage = 0;
    const char* languages[] = { "English", "Ukrainian" };

    ImGui::PushItemWidth(languageListWidth);  // –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–∫–∏–º –∂–µ —à–∏—Ä–æ–∫–∏–º
    ImGui::Combo("##Language", &selectedLanguage, languages, IM_ARRAYSIZE(languages));
    ImGui::PopItemWidth();

    ImGui::PopStyleColor(4);
} 

    // üîπ –ü–∞–Ω–µ–ª—å —Ç–∞–π–º–µ—Ä–∞
    ImTextureID timerTextureId = static_cast<ImTextureID>(static_cast<intptr_t>(m_timerIconTexture->GetTextureID()));
    float timerPanelX = centerX - 250;
    float timerPanelY = 150.0f;
    
    ImGui::SetCursorPos(ImVec2(timerPanelX, timerPanelY));
    ImGui::Image(timerTextureId, ImVec2(200, 100));
    
    ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 1.0f, 1.0f, 1.0f));
    static float timerValue = 30.0f;
    ImGui::SetCursorPos(ImVec2(timerPanelX + 15, timerPanelY + 50)); // –ü–æ–¥–ø–∏—Å–∞–ª –ø–æ–ª–∑—É–Ω–æ–∫ –Ω–∏–∂–µ
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ-—Å–µ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
    ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.2f, 0.2f, 1.0f)); // –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.4f, 0.4f, 0.4f, 1.0f)); // –°–µ—Ä—ã–π –ø–æ–ª–∑—É–Ω–æ–∫
    
    ImGui::PushItemWidth(170);
    ImGui::SliderFloat("##Timer", &timerValue, 10.0f, 120.0f, "%.0f s");
    ImGui::PopItemWidth();
    
    ImGui::PopStyleColor(3); // –£–±–∏—Ä–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è (—Ç–µ–∫—Å—Ç + 2 —Ü–≤–µ—Ç–∞)
    


   // üîπ Competitor –ø–∞–Ω–µ–ª—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º
ImTextureID competitorTextureId = static_cast<ImTextureID>(static_cast<intptr_t>(m_competitorIconTexture->GetTextureID()));
float competitorPanelWidth = 200.0f;
float competitorPanelHeight = 100.0f;
float competitorPanelX = centerX + 50;
float competitorPanelY = 150.0f;

// üîπ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ–Ω Competitor (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
ImGui::SetCursorPos(ImVec2(competitorPanelX, competitorPanelY));
ImGui::Image(competitorTextureId, ImVec2(competitorPanelWidth, competitorPanelHeight));

// üîπ –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (—Ü–≤–µ—Ç–∞: –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç, —Å–µ—Ä—ã–π —Ñ–æ–Ω)
static char competitorName[64] = ""; // –ë—É—Ñ–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
ImGui::SetCursorPos(ImVec2(competitorPanelX + 15, competitorPanelY + 50)); // –°–º–µ—â–∞–µ–º –≤–Ω–∏–∑
ImGui::PushItemWidth(competitorPanelWidth - 30); // –ü–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É

ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 1.0f, 1.0f, 1.0f));        // üîπ –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.2f, 0.2f, 1.0f));    // üîπ –°–µ—Ä—ã–π —Ñ–æ–Ω –ø–æ–ª—è –≤–≤–æ–¥–∞

ImGui::InputText("##Competitor", competitorName, IM_ARRAYSIZE(competitorName));

ImGui::PopStyleColor(2); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ (2 —Ü–≤–µ—Ç–∞)
ImGui::PopItemWidth();

// üîπ –ö–Ω–æ–ø–∫–∞ "New Run" –≤–Ω–∏–∑—É
float newRunButtonWidth = 500.0f;
float newRunButtonHeight = 50.0f;
float newRunButtonX = (ImGui::GetWindowSize().x - newRunButtonWidth) * 0.5f;
float newRunButtonY = ImGui::GetWindowSize().y - newRunButtonHeight - 40.0f;

ImGui::SetCursorPos(ImVec2(newRunButtonX, newRunButtonY));
ImTextureID newRunTexId = static_cast<ImTextureID>(static_cast<intptr_t>(m_newRunButton->GetTextureID()));

if (ImGui::ImageButton("NewRunBtn", newRunTexId, ImVec2(newRunButtonWidth, newRunButtonHeight))) {
    showPreStart = false;  // –ó–∞–∫—Ä—ã–≤–∞–µ–º PreStart
    renderStart.renderStartWindow(showPreStart);  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç–µ—Å—Ç–∞

   TypingSpeedAPI();  // üèÅ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
}

    ImGui::PopStyleVar(2);
    ImGui::PopStyleColor(4);
    ImGui::End();
}

